#!/usr/bin/env node
import { createMainParser } from './main_parser_factory.js';
import { attachUnhandledExceptionListeners, generateCommandFailureHandler, } from './error_handler.js';
import { extractSubCommands } from './extract_sub_commands.js';
import { AmplifyFault, PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { fileURLToPath } from 'node:url';
import { verifyCommandName } from './verify_command_name.js';
import { hideBin } from 'yargs/helpers';
import { PackageManagerControllerFactory, format } from '@aws-amplify/cli-core';
import { NoticesRenderer } from './notices/notices_renderer.js';
const packageJson = new PackageJsonReader().read(fileURLToPath(new URL('../package.json', import.meta.url)));
const libraryVersion = packageJson.version;
if (libraryVersion == undefined) {
    throw new AmplifyFault('UnknownVersionFault', {
        message: 'Library version cannot be determined. Check the library installation',
    });
}
const packageManagerController = new PackageManagerControllerFactory().getPackageManagerController();
const dependencies = await packageManagerController.tryGetDependencies();
const usageDataEmitter = await new UsageDataEmitterFactory().getInstance(libraryVersion, dependencies);
attachUnhandledExceptionListeners(usageDataEmitter);
verifyCommandName();
const noticesRenderer = new NoticesRenderer(packageManagerController);
const parser = createMainParser(libraryVersion, noticesRenderer);
const errorHandler = generateCommandFailureHandler(parser, usageDataEmitter);
try {
    await parser.parseAsync(hideBin(process.argv));
    const metricDimension = {};
    const subCommands = extractSubCommands(parser);
    if (subCommands) {
        metricDimension.command = subCommands;
    }
    await noticesRenderer.tryFindAndPrintApplicableNotices({
        event: 'postCommand',
    });
    await usageDataEmitter.emitSuccess({}, metricDimension);
}
catch (e) {
    if (e instanceof Error) {
        await noticesRenderer.tryFindAndPrintApplicableNotices({
            event: 'postCommand',
            error: e,
        });
        await errorHandler(format.error(e), e);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1weC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hbXB4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsaUNBQWlDLEVBQ2pDLDZCQUE2QixHQUM5QixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFDTCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRWhFLE1BQU0sV0FBVyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQzlDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNELENBQUM7QUFDRixNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO0FBRTNDLElBQUksY0FBYyxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sSUFBSSxZQUFZLENBQUMscUJBQXFCLEVBQUU7UUFDNUMsT0FBTyxFQUNMLHNFQUFzRTtLQUN6RSxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSx3QkFBd0IsR0FDNUIsSUFBSSwrQkFBK0IsRUFBRSxDQUFDLDJCQUEyQixFQUFFLENBQUM7QUFDdEUsTUFBTSxZQUFZLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBRXpFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUN0RSxjQUFjLEVBQ2QsWUFBWSxDQUNiLENBQUM7QUFFRixpQ0FBaUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXBELGlCQUFpQixFQUFFLENBQUM7QUFFcEIsTUFBTSxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN0RSxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDakUsTUFBTSxZQUFZLEdBQUcsNkJBQTZCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFN0UsSUFBSSxDQUFDO0lBQ0gsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLGVBQWUsR0FBMkIsRUFBRSxDQUFDO0lBQ25ELE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9DLElBQUksV0FBVyxFQUFFLENBQUM7UUFDaEIsZUFBZSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sZUFBZSxDQUFDLGdDQUFnQyxDQUFDO1FBQ3JELEtBQUssRUFBRSxhQUFhO0tBQ3JCLENBQUMsQ0FBQztJQUNILE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUNYLElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sZUFBZSxDQUFDLGdDQUFnQyxDQUFDO1lBQ3JELEtBQUssRUFBRSxhQUFhO1lBQ3BCLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCB7IGNyZWF0ZU1haW5QYXJzZXIgfSBmcm9tICcuL21haW5fcGFyc2VyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgYXR0YWNoVW5oYW5kbGVkRXhjZXB0aW9uTGlzdGVuZXJzLFxuICBnZW5lcmF0ZUNvbW1hbmRGYWlsdXJlSGFuZGxlcixcbn0gZnJvbSAnLi9lcnJvcl9oYW5kbGVyLmpzJztcbmltcG9ydCB7IGV4dHJhY3RTdWJDb21tYW5kcyB9IGZyb20gJy4vZXh0cmFjdF9zdWJfY29tbWFuZHMuanMnO1xuaW1wb3J0IHtcbiAgQW1wbGlmeUZhdWx0LFxuICBQYWNrYWdlSnNvblJlYWRlcixcbiAgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQgeyB2ZXJpZnlDb21tYW5kTmFtZSB9IGZyb20gJy4vdmVyaWZ5X2NvbW1hbmRfbmFtZS5qcyc7XG5pbXBvcnQgeyBoaWRlQmluIH0gZnJvbSAneWFyZ3MvaGVscGVycyc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5LCBmb3JtYXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgTm90aWNlc1JlbmRlcmVyIH0gZnJvbSAnLi9ub3RpY2VzL25vdGljZXNfcmVuZGVyZXIuanMnO1xuXG5jb25zdCBwYWNrYWdlSnNvbiA9IG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLnJlYWQoXG4gIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSksXG4pO1xuY29uc3QgbGlicmFyeVZlcnNpb24gPSBwYWNrYWdlSnNvbi52ZXJzaW9uO1xuXG5pZiAobGlicmFyeVZlcnNpb24gPT0gdW5kZWZpbmVkKSB7XG4gIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ1Vua25vd25WZXJzaW9uRmF1bHQnLCB7XG4gICAgbWVzc2FnZTpcbiAgICAgICdMaWJyYXJ5IHZlcnNpb24gY2Fubm90IGJlIGRldGVybWluZWQuIENoZWNrIHRoZSBsaWJyYXJ5IGluc3RhbGxhdGlvbicsXG4gIH0pO1xufVxuXG5jb25zdCBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgPVxuICBuZXcgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSgpLmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpO1xuY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyLnRyeUdldERlcGVuZGVuY2llcygpO1xuXG5jb25zdCB1c2FnZURhdGFFbWl0dGVyID0gYXdhaXQgbmV3IFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5KCkuZ2V0SW5zdGFuY2UoXG4gIGxpYnJhcnlWZXJzaW9uLFxuICBkZXBlbmRlbmNpZXMsXG4pO1xuXG5hdHRhY2hVbmhhbmRsZWRFeGNlcHRpb25MaXN0ZW5lcnModXNhZ2VEYXRhRW1pdHRlcik7XG5cbnZlcmlmeUNvbW1hbmROYW1lKCk7XG5cbmNvbnN0IG5vdGljZXNSZW5kZXJlciA9IG5ldyBOb3RpY2VzUmVuZGVyZXIocGFja2FnZU1hbmFnZXJDb250cm9sbGVyKTtcbmNvbnN0IHBhcnNlciA9IGNyZWF0ZU1haW5QYXJzZXIobGlicmFyeVZlcnNpb24sIG5vdGljZXNSZW5kZXJlcik7XG5jb25zdCBlcnJvckhhbmRsZXIgPSBnZW5lcmF0ZUNvbW1hbmRGYWlsdXJlSGFuZGxlcihwYXJzZXIsIHVzYWdlRGF0YUVtaXR0ZXIpO1xuXG50cnkge1xuICBhd2FpdCBwYXJzZXIucGFyc2VBc3luYyhoaWRlQmluKHByb2Nlc3MuYXJndikpO1xuICBjb25zdCBtZXRyaWNEaW1lbnNpb246IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgY29uc3Qgc3ViQ29tbWFuZHMgPSBleHRyYWN0U3ViQ29tbWFuZHMocGFyc2VyKTtcblxuICBpZiAoc3ViQ29tbWFuZHMpIHtcbiAgICBtZXRyaWNEaW1lbnNpb24uY29tbWFuZCA9IHN1YkNvbW1hbmRzO1xuICB9XG5cbiAgYXdhaXQgbm90aWNlc1JlbmRlcmVyLnRyeUZpbmRBbmRQcmludEFwcGxpY2FibGVOb3RpY2VzKHtcbiAgICBldmVudDogJ3Bvc3RDb21tYW5kJyxcbiAgfSk7XG4gIGF3YWl0IHVzYWdlRGF0YUVtaXR0ZXIuZW1pdFN1Y2Nlc3Moe30sIG1ldHJpY0RpbWVuc2lvbik7XG59IGNhdGNoIChlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBhd2FpdCBub3RpY2VzUmVuZGVyZXIudHJ5RmluZEFuZFByaW50QXBwbGljYWJsZU5vdGljZXMoe1xuICAgICAgZXZlbnQ6ICdwb3N0Q29tbWFuZCcsXG4gICAgICBlcnJvcjogZSxcbiAgICB9KTtcbiAgICBhd2FpdCBlcnJvckhhbmRsZXIoZm9ybWF0LmVycm9yKGUpLCBlKTtcbiAgfVxufVxuIl19