import path from 'path';
import { existsSync } from 'fs';
import { AmplifyError, AmplifyUserError } from '@aws-amplify/platform-core';
import { format, printer } from '@aws-amplify/cli-core';
import { tsImport } from 'tsx/esm/api';
import { pathToFileURL } from 'url';
/**
 * Command that runs seed in sandbox environment
 */
export class SandboxSeedCommand {
    backendIDResolver;
    seedSubCommands;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Seeds sandbox environment.
     */
    constructor(backendIDResolver, seedSubCommands) {
        this.backendIDResolver = backendIDResolver;
        this.seedSubCommands = seedSubCommands;
        this.command = 'seed';
        this.describe = 'Seeds sandbox environment';
    }
    /**
     * @inheritDoc
     */
    handler = async () => {
        printer.print(`${format.color('seed is running...', 'Blue')}`);
        const backendID = await this.backendIDResolver.resolve();
        const seedPath = path.join('amplify', 'seed', 'seed.ts');
        process.env.AMPLIFY_BACKEND_IDENTIFIER = JSON.stringify(backendID);
        try {
            await tsImport(pathToFileURL(seedPath).toString(), import.meta.url);
        }
        catch (e) {
            const error = e;
            if (error.message.includes('Cannot find module') &&
                error.message.includes('seed')) {
                throw new AmplifyUserError('SeedScriptNotFoundError', {
                    message: `There is no file that corresponds to ${seedPath}`,
                    resolution: `Please make a file that corresponds to ${seedPath} and put your seed logic in it`,
                }, error);
            }
            else {
                if (AmplifyError.isAmplifyError(e)) {
                    throw e;
                }
                throw new AmplifyUserError('SeedingFailedError', {
                    message: 'Seed failed to complete',
                    resolution: 'Check the Caused by error and fix any issues in your seed script',
                }, e instanceof Error ? error : undefined);
            }
        }
        printer.printNewLine();
        printer.print(`${format.success('âœ”')} seed has successfully completed`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.command(this.seedSubCommands).check(() => {
            const seedPath = path.join(process.cwd(), 'amplify', 'seed', 'seed.ts');
            if (!existsSync(seedPath)) {
                throw new AmplifyUserError('SeedScriptNotFoundError', {
                    message: `There is no file that corresponds to ${seedPath}`,
                    resolution: `Please make a file that corresponds to ${seedPath} and put your seed logic in it`,
                });
            }
            return true;
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWVkX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlZWQvc2FuZGJveF9zZWVkX2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFaEMsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQWVWO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsZUFBZ0M7UUFEaEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRywyQkFBMkIsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxJQUFtQixFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQztZQUNILE1BQU0sUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ1gsTUFBTSxLQUFLLEdBQUcsQ0FBVSxDQUFDO1lBQ3pCLElBQ0UsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUM7Z0JBQzVDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUM5QixDQUFDO2dCQUNELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIseUJBQXlCLEVBQ3pCO29CQUNFLE9BQU8sRUFBRSx3Q0FBd0MsUUFBUSxFQUFFO29CQUMzRCxVQUFVLEVBQUUsMENBQTBDLFFBQVEsZ0NBQWdDO2lCQUMvRixFQUNELEtBQUssQ0FDTixDQUFDO1lBQ0osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUNuQyxNQUFNLENBQUMsQ0FBQztnQkFDVixDQUFDO2dCQUNELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsb0JBQW9CLEVBQ3BCO29CQUNFLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLFVBQVUsRUFDUixrRUFBa0U7aUJBQ3JFLEVBQ0QsQ0FBQyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3ZDLENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBcUMsRUFBRTtRQUMzRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQzFCLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQyx5QkFBeUIsRUFBRTtvQkFDcEQsT0FBTyxFQUFFLHdDQUF3QyxRQUFRLEVBQUU7b0JBQzNELFVBQVUsRUFBRSwwQ0FBMEMsUUFBUSxnQ0FBZ0M7aUJBQy9GLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5RXJyb3IsIEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25fdHlwZXMuanMnO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IHRzSW1wb3J0IH0gZnJvbSAndHN4L2VzbS9hcGknO1xuaW1wb3J0IHsgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCc7XG5cbi8qKlxuICogQ29tbWFuZCB0aGF0IHJ1bnMgc2VlZCBpbiBzYW5kYm94IGVudmlyb25tZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VlZENvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdD4ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNlZWRzIHNhbmRib3ggZW52aXJvbm1lbnQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmRJRFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWVkU3ViQ29tbWFuZHM6IENvbW1hbmRNb2R1bGVbXSxcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3NlZWQnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnU2VlZHMgc2FuZGJveCBlbnZpcm9ubWVudCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgcHJpbnRlci5wcmludChgJHtmb3JtYXQuY29sb3IoJ3NlZWQgaXMgcnVubmluZy4uLicsICdCbHVlJyl9YCk7XG4gICAgY29uc3QgYmFja2VuZElEID0gYXdhaXQgdGhpcy5iYWNrZW5kSURSZXNvbHZlci5yZXNvbHZlKCk7XG4gICAgY29uc3Qgc2VlZFBhdGggPSBwYXRoLmpvaW4oJ2FtcGxpZnknLCAnc2VlZCcsICdzZWVkLnRzJyk7XG4gICAgcHJvY2Vzcy5lbnYuQU1QTElGWV9CQUNLRU5EX0lERU5USUZJRVIgPSBKU09OLnN0cmluZ2lmeShiYWNrZW5kSUQpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0c0ltcG9ydChwYXRoVG9GaWxlVVJMKHNlZWRQYXRoKS50b1N0cmluZygpLCBpbXBvcnQubWV0YS51cmwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gZSBhcyBFcnJvcjtcbiAgICAgIGlmIChcbiAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnQ2Fubm90IGZpbmQgbW9kdWxlJykgJiZcbiAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnc2VlZCcpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgJ1NlZWRTY3JpcHROb3RGb3VuZEVycm9yJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgVGhlcmUgaXMgbm8gZmlsZSB0aGF0IGNvcnJlc3BvbmRzIHRvICR7c2VlZFBhdGh9YCxcbiAgICAgICAgICAgIHJlc29sdXRpb246IGBQbGVhc2UgbWFrZSBhIGZpbGUgdGhhdCBjb3JyZXNwb25kcyB0byAke3NlZWRQYXRofSBhbmQgcHV0IHlvdXIgc2VlZCBsb2dpYyBpbiBpdGAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChBbXBsaWZ5RXJyb3IuaXNBbXBsaWZ5RXJyb3IoZSkpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICdTZWVkaW5nRmFpbGVkRXJyb3InLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdTZWVkIGZhaWxlZCB0byBjb21wbGV0ZScsXG4gICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAnQ2hlY2sgdGhlIENhdXNlZCBieSBlcnJvciBhbmQgZml4IGFueSBpc3N1ZXMgaW4geW91ciBzZWVkIHNjcmlwdCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmludGVyLnByaW50TmV3TGluZSgpO1xuICAgIHByaW50ZXIucHJpbnQoYCR7Zm9ybWF0LnN1Y2Nlc3MoJ+KclCcpfSBzZWVkIGhhcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkYCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3MuY29tbWFuZCh0aGlzLnNlZWRTdWJDb21tYW5kcykuY2hlY2soKCkgPT4ge1xuICAgICAgY29uc3Qgc2VlZFBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2FtcGxpZnknLCAnc2VlZCcsICdzZWVkLnRzJyk7XG4gICAgICBpZiAoIWV4aXN0c1N5bmMoc2VlZFBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdTZWVkU2NyaXB0Tm90Rm91bmRFcnJvcicsIHtcbiAgICAgICAgICBtZXNzYWdlOiBgVGhlcmUgaXMgbm8gZmlsZSB0aGF0IGNvcnJlc3BvbmRzIHRvICR7c2VlZFBhdGh9YCxcbiAgICAgICAgICByZXNvbHV0aW9uOiBgUGxlYXNlIG1ha2UgYSBmaWxlIHRoYXQgY29ycmVzcG9uZHMgdG8gJHtzZWVkUGF0aH0gYW5kIHB1dCB5b3VyIHNlZWQgbG9naWMgaW4gaXRgLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9O1xufVxuIl19