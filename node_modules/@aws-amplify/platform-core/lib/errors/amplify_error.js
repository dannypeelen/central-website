"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyError = void 0;
const _1 = require(".");
/**
 * Base class for all Amplify errors or faults
 */
class AmplifyError extends Error {
    name;
    classification;
    options;
    cause;
    serializedError;
    message;
    resolution;
    details;
    link;
    code;
    /**
     * You should use AmplifyUserError or AmplifyLibraryFault to throw an error.
     * @param name - a user friendly name for the exception
     * @param classification - LibraryFault or UserError
     * @param options - error stack, resolution steps, details, or help links
     * @param cause If you are throwing this exception from within a catch block,
     * you must provide the exception that was caught.
     * @example
     * try {
     *  ...
     * } catch (error){
     *    throw new AmplifyError(...,...,error);
     * }
     */
    constructor(name, classification, options, cause) {
        // If an AmplifyError was already thrown, we must allow it to reach the user.
        // This ensures that resolution steps, and the original error are bubbled up.
        super(options.message, { cause });
        this.name = name;
        this.classification = classification;
        this.options = options;
        this.cause = cause;
        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, AmplifyError.prototype);
        this.message = options.message;
        this.details = options.details;
        this.resolution = options.resolution;
        this.code = options.code;
        this.link = options.link;
        if (cause && AmplifyError.isAmplifyError(cause)) {
            cause.serializedError = undefined;
        }
        this.serializedError = Buffer.from(JSON.stringify({
            name,
            classification,
            options,
            cause,
        }, errorSerializer)).toString('base64');
    }
    static fromStderr = (_stderr) => {
        try {
            const serializedString = tryFindSerializedErrorJSONString(_stderr);
            if (!serializedString) {
                return undefined;
            }
            const { name, classification, options, cause } = JSON.parse(serializedString);
            let serializedCause = cause;
            if (cause && ErrorSerializerDeserializer.isSerializedErrorType(cause)) {
                serializedCause = ErrorSerializerDeserializer.deserialize(cause);
            }
            return classification === 'ERROR'
                ? new _1.AmplifyUserError(name, options, serializedCause)
                : new _1.AmplifyFault(name, options, serializedCause);
        }
        catch {
            // cannot deserialize
            return undefined;
        }
    };
    /**
     * This function is a type predicate for AmplifyError.
     * See https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates.
     *
     * Checks if error is an AmplifyError by inspecting if required properties are set.
     * This is recommended instead of instanceof operator.
     * The instance of operator does not work as expected if AmplifyError class is loaded
     * from multiple sources, for example when package manager decides to not de-duplicate dependencies.
     * See https://github.com/nodejs/node/issues/17943.
     */
    static isAmplifyError = (error) => {
        return (error instanceof Error &&
            'classification' in error &&
            (error.classification === 'ERROR' || error.classification === 'FAULT') &&
            typeof error.name === 'string' &&
            typeof error.message === 'string');
    };
    static fromError = (error) => {
        if (AmplifyError.isAmplifyError(error)) {
            return error;
        }
        const errorMessage = error instanceof Error
            ? `${error.name}: ${error.message}`
            : 'An unknown error happened. Check downstream error';
        if (error instanceof Error && isCredentialsError(error)) {
            return new _1.AmplifyUserError('CredentialsError', {
                message: errorMessage,
                resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
            }, error);
        }
        if (error instanceof Error && isRequestSignatureError(error)) {
            return new _1.AmplifyUserError('RequestSignatureError', {
                message: errorMessage,
                resolution: 'You can retry your last request, check if your system time is synchronized (clock skew) or ensure your AWS credentials are correctly set and refreshed.',
            }, error);
        }
        if (error instanceof Error && isYargsValidationError(error)) {
            return new _1.AmplifyUserError('InvalidCommandInputError', {
                message: errorMessage,
                resolution: 'Please see the underlying error message for resolution.',
            }, error);
        }
        if (error instanceof Error && isENotFoundError(error)) {
            return new _1.AmplifyUserError('DomainNotFoundError', {
                message: 'Unable to establish a connection to a domain',
                resolution: 'Ensure domain name is correct and network connection is stable.',
            }, error);
        }
        /**
         * catches SyntaxErrors that were somehow not instances of AmplifyError
         * this can be removed once we can properly identify where AmplifyError is being stripped off
         */
        if (error instanceof Error && isSyntaxError(error)) {
            return new _1.AmplifyUserError('SyntaxError', {
                message: error.message,
                resolution: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            }, error);
        }
        if (error instanceof Error && isInsufficientDiskSpaceError(error)) {
            return new _1.AmplifyUserError('InsufficientDiskSpaceError', {
                message: error.message,
                resolution: 'There appears to be insufficient space on your system to finish. Clear up some disk space and try again.',
            }, error);
        }
        if (error instanceof Error && isOutOfMemoryError(error)) {
            return new _1.AmplifyUserError('InsufficientMemorySpaceError', {
                message: error.message,
                resolution: 'There appears to be insufficient memory on your system to finish. Close other applications or restart your system and try again.',
            }, error);
        }
        if (error instanceof Error && isInotifyError(error)) {
            return new _1.AmplifyUserError('InsufficientInotifyWatchersError', {
                message: error.message,
                resolution: 'There appears to be an insufficient number of inotify watchers. To increase the amount of inotify watchers, change the `fs.inotify.max_user_watches` setting in your system config files to a higher value.',
            }, error);
        }
        return new _1.AmplifyFault('UnknownFault', {
            message: errorMessage,
        }, error instanceof Error ? error : new Error(String(error)));
    };
}
exports.AmplifyError = AmplifyError;
const tryFindSerializedErrorJSONString = (_stderr) => {
    let errorJSONString = tryFindSerializedErrorJSONStringV2(_stderr);
    if (!errorJSONString) {
        errorJSONString = tryFindSerializedErrorJSONStringV1(_stderr);
    }
    return errorJSONString;
};
/**
 * Tries to find serialized string assuming that it is in a form of serialized JSON encoded with base64.
 */
const tryFindSerializedErrorJSONStringV2 = (_stderr) => {
    /**
     * `["']?serializedError["']?:[ ]?` captures the start of the serialized error. The quotes depend on which OS is being used
     * `(?:`([a-zA-Z0-9+/=]+?)`|'([a-zA-Z0-9+/=]+?)'|"([a-zA-Z0-9+/=]+?)")` captures the rest of the serialized string enclosed in either single quote,
     * double quotes or back-ticks.
     */
    const extractionRegex = /["']?serializedError["']?:[ ]?(?:`([a-zA-Z0-9+/=]+?)`|'([a-zA-Z0-9+/=]+?)'|"([a-zA-Z0-9+/=]+?)")/;
    const serialized = _stderr.match(extractionRegex);
    if (serialized && serialized.length === 4) {
        // 4 because 1 match and 3 capturing groups
        const base64SerializedString = serialized
            .slice(1)
            .find((item) => item && item.length > 0);
        if (base64SerializedString) {
            return Buffer.from(base64SerializedString, 'base64').toString('utf-8');
        }
    }
    return undefined;
};
/**
 * Tries to find serialized string assuming that it is in a form of serialized JSON.
 * @deprecated This is old format left for backwards compatibility in case that synth-time components are using older version of platform-core.
 */
const tryFindSerializedErrorJSONStringV1 = (_stderr) => {
    /**
     * `["']?serializedError["']?:[ ]?` captures the start of the serialized error. The quotes depend on which OS is being used
     * `(?:`(.+?)`|'(.+?)'|"((?:\\"|[^"])*?)")` captures the rest of the serialized string enclosed in either single quote,
     * double quotes or back-ticks.
     */
    const extractionRegex = /["']?serializedError["']?:[ ]?(?:`(.+?)`|'(.+?)'|"((?:\\"|[^"])*?)")/;
    const serialized = _stderr.match(extractionRegex);
    if (serialized && serialized.length === 4) {
        // 4 because 1 match and 3 capturing groups
        return serialized
            .slice(1)
            .find((item) => item && item.length > 0)
            ?.replaceAll('\\"', '"')
            .replaceAll("\\'", "'");
    }
    return undefined;
};
const isCredentialsError = (err) => {
    return (!!err &&
        [
            'ExpiredToken',
            'ExpiredTokenException',
            'CredentialsProviderError',
            'InvalidClientTokenId',
            'CredentialsError',
        ].includes(err.name));
};
const isRequestSignatureError = (err) => {
    return (!!err &&
        ['InvalidSignatureException', 'SignatureDoesNotMatch'].includes(err.name));
};
// These validation messages are taken from https://github.com/yargs/yargs/blob/0c95f9c79e1810cf9c8964fbf7d139009412f7e7/lib/validation.ts
const isYargsValidationError = (err) => {
    return (!!err &&
        ([
            'Unknown command',
            'Unknown argument',
            'Did you mean',
            'Not enough non-option arguments',
            'Too many non-option arguments',
            'Missing required argument',
            'Invalid values:',
            'Missing dependent arguments',
            'Implications failed',
        ].some((message) => err.message.startsWith(message)) ||
            err.message.endsWith('are mutually exclusive')));
};
const isENotFoundError = (err) => {
    return !!err && err.message.includes('getaddrinfo ENOTFOUND');
};
const isSyntaxError = (err) => {
    return !!err && err.name === 'SyntaxError';
};
const isInsufficientDiskSpaceError = (err) => {
    return (!!err &&
        ['ENOSPC: no space left on device', 'code ENOSPC'].some((message) => err.message.includes(message)));
};
const isOutOfMemoryError = (err) => {
    return (!!err &&
        (err.message.includes('process out of memory') ||
            err.message.includes('connect ENOMEM')));
};
const isInotifyError = (err) => {
    return !!err && err.message.includes('inotify_add_watch');
};
const errorSerializer = (_, value) => {
    if (value instanceof Error) {
        return ErrorSerializerDeserializer.serialize(value);
    }
    return value;
};
class ErrorSerializerDeserializer {
    static serialize = (error) => {
        const serializedError = {
            name: error.name,
            message: error.message,
        };
        return serializedError;
    };
    static deserialize = (deserialized) => {
        const error = new Error(deserialized.message);
        error.name = deserialized.name;
        return error;
    };
    static isSerializedErrorType = (obj) => {
        if (obj &&
            obj.name &&
            obj.message)
            return true;
        return false;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9lcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvYW1wbGlmeV9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3QkFBbUQ7QUFFbkQ7O0dBRUc7QUFDSCxNQUFzQixZQUF3QyxTQUFRLEtBQUs7SUF1QnZEO0lBQ0E7SUFDQztJQUNEO0lBekJYLGVBQWUsQ0FBVTtJQUNoQixPQUFPLENBQVM7SUFDaEIsVUFBVSxDQUFVO0lBQ3BCLE9BQU8sQ0FBVTtJQUNqQixJQUFJLENBQVU7SUFDZCxJQUFJLENBQVU7SUFFOUI7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILFlBQ2tCLElBQU8sRUFDUCxjQUEwQyxFQUN6QyxPQUE0QixFQUM3QixLQUFhO1FBRTdCLDZFQUE2RTtRQUM3RSw2RUFBNkU7UUFDN0UsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBUGxCLFNBQUksR0FBSixJQUFJLENBQUc7UUFDUCxtQkFBYyxHQUFkLGNBQWMsQ0FBNEI7UUFDekMsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDN0IsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQU03Qiw2SUFBNkk7UUFDN0ksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXBELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFFekIsSUFBSSxLQUFLLElBQUksWUFBWSxDQUFDLGNB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O1NBQ3ZCLENBQUM7UUFDRixPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsWUFBaUMsRUFBRSxFQUFFO1FBQ3pELE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDL0IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7SUFFRixNQUFNLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxHQUFZLEVBQThCLEVBQUU7UUFDMUUsSUFDRSxHQUFHO1lBQ0YsR0FBMkIsQ0FBQyxJQUFJO1lBQ2hDLEdBQTJCLENBQUMsT0FBTztZQUVwQyxPQUFPLElBQUksQ0FBQztRQUNkLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW1wbGlmeUZhdWx0LCBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnLic7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIEFtcGxpZnkgZXJyb3JzIG9yIGZhdWx0c1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW1wbGlmeUVycm9yPFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgc2VyaWFsaXplZEVycm9yPzogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgbWVzc2FnZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzb2x1dGlvbj86IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGRldGFpbHM/OiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBsaW5rPzogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgY29kZT86IHN0cmluZztcblxuICAvKipcbiAgICogWW91IHNob3VsZCB1c2UgQW1wbGlmeVVzZXJFcnJvciBvciBBbXBsaWZ5TGlicmFyeUZhdWx0IHRvIHRocm93IGFuIGVycm9yLlxuICAgKiBAcGFyYW0gbmFtZSAtIGEgdXNlciBmcmllbmRseSBuYW1lIGZvciB0aGUgZXhjZXB0aW9uXG4gICAqIEBwYXJhbSBjbGFzc2lmaWNhdGlvbiAtIExpYnJhcnlGYXVsdCBvciBVc2VyRXJyb3JcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBlcnJvciBzdGFjaywgcmVzb2x1dGlvbiBzdGVwcywgZGV0YWlscywgb3IgaGVscCBsaW5rc1xuICAgKiBAcGFyYW0gY2F1c2UgSWYgeW91IGFyZSB0aHJvd2luZyB0aGlzIGV4Y2VwdGlvbiBmcm9tIHdpdGhpbiBhIGNhdGNoIGJsb2NrLFxuICAgKiB5b3UgbXVzdCBwcm92aWRlIHRoZSBleGNlcHRpb24gdGhhdCB3YXMgY2F1Z2h0LlxuICAgKiBAZXhhbXBsZVxuICAgKiB0cnkge1xuICAgKiAgLi4uXG4gICAqIH0gY2F0Y2ggKGVycm9yKXtcbiAgICogICAgdGhyb3cgbmV3IEFtcGxpZnlFcnJvciguLi4sLi4uLGVycm9yKTtcbiAgICogfVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IFQsXG4gICAgcHVibGljIHJlYWRvbmx5IGNsYXNzaWZpY2F0aW9uOiBBbXBsaWZ5RXJyb3JDbGFzc2lmaWNhdGlvbixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IEFtcGxpZnlFcnJvck9wdGlvbnMsXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdXNlPzogRXJyb3IsXG4gICkge1xuICAgIC8vIElmIGFuIEFtcGxpZnlFcnJvciB3YXMgYWxyZWFkeSB0aHJvd24sIHdlIG11c3QgYWxsb3cgaXQgdG8gcmVhY2ggdGhlIHVzZXIuXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgcmVzb2x1dGlvbiBzdGVwcywgYW5kIHRoZSBvcmlnaW5hbCBlcnJvciBhcmUgYnViYmxlZCB1cC5cbiAgICBzdXBlcihvcHRpb25zLm1lc3NhZ2UsIHsgY2F1c2UgfSk7XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21haW4vQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQW1wbGlmeUVycm9yLnByb3RvdHlwZSk7XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5kZXRhaWxzID0gb3B0aW9ucy5kZXRhaWxzO1xuICAgIHRoaXMucmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbjtcbiAgICB0aGlzLmNvZGUgPSBvcHRpb25zLmNvZGU7XG4gICAgdGhpcy5saW5rID0gb3B0aW9ucy5saW5rO1xuXG4gICAgaWYgKGNhdXNlICYmIEFtcGxpZnlFcnJvci5pc0FtcGxpZnlFcnJvcihjYXVzZSkpIHtcbiAgICAgIGNhdXNlLnNlcmlhbGl6ZWRFcnJvciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5zZXJpYWxpemVkRXJyb3IgPSBCdWZmZXIuZnJvbShcbiAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBjbGFzc2lmaWNhdGlvbixcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIGNhdXNlLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvclNlcmlhbGl6ZXIsXG4gICAgICApLFxuICAgICkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9XG5cbiAgc3RhdGljIGZyb21TdGRlcnIgPSAoX3N0ZGVycjogc3RyaW5nKTogQW1wbGlmeUVycm9yIHwgdW5kZWZpbmVkID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VyaWFsaXplZFN0cmluZyA9IHRyeUZpbmRTZXJpYWxpemVkRXJyb3JKU09OU3RyaW5nKF9zdGRlcnIpO1xuXG4gICAgICBpZiAoIXNlcmlhbGl6ZWRTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBuYW1lLCBjbGFzc2lmaWNhdGlvbiwgb3B0aW9ucywgY2F1c2UgfSA9XG4gICAgICAgIEpTT04ucGFyc2Uoc2VyaWFsaXplZFN0cmluZyk7XG5cbiAgICAgIGxldCBzZXJpYWxpemVkQ2F1c2UgPSBjYXVzZTtcbiAgICAgIGlmIChjYXVzZSAmJiBFcnJvclNlcmlhbGl6ZXJEZXNlcmlhbGl6ZXIuaXNTZXJpYWxpemVkRXJyb3JUeXBlKGNhdXNlKSkge1xuICAgICAgICBzZXJpYWxpemVkQ2F1c2UgPSBFcnJvclNlcmlhbGl6ZXJEZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoY2F1c2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzaWZpY2F0aW9uID09PSAnRVJST1InXG4gICAgICAgID8gbmV3IEFtcGxpZnlVc2VyRXJyb3IobmFtZSwgb3B0aW9ucywgc2VyaWFsaXplZENhdXNlKVxuICAgICAgICA6IG5ldyBBbXBsaWZ5RmF1bHQobmFtZSwgb3B0aW9ucywgc2VyaWFsaXplZENhdXNlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIGNhbm5vdCBkZXNlcmlhbGl6ZVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgYSB0eXBlIHByZWRpY2F0ZSBmb3IgQW1wbGlmeUVycm9yLlxuICAgKiBTZWUgaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svMi9uYXJyb3dpbmcuaHRtbCN1c2luZy10eXBlLXByZWRpY2F0ZXMuXG4gICAqXG4gICAqIENoZWNrcyBpZiBlcnJvciBpcyBhbiBBbXBsaWZ5RXJyb3IgYnkgaW5zcGVjdGluZyBpZiByZXF1aXJlZCBwcm9wZXJ0aWVzIGFyZSBzZXQuXG4gICAqIFRoaXMgaXMgcmVjb21tZW5kZWQgaW5zdGVhZCBvZiBpbnN0YW5jZW9mIG9wZXJhdG9yLlxuICAgKiBUaGUgaW5zdGFuY2Ugb2Ygb3BlcmF0b3IgZG9lcyBub3Qgd29yayBhcyBleHBlY3RlZCBpZiBBbXBsaWZ5RXJyb3IgY2xhc3MgaXMgbG9hZGVkXG4gICAqIGZyb20gbXVsdGlwbGUgc291cmNlcywgZm9yIGV4YW1wbGUgd2hlbiBwYWNrYWdlIG1hbmFnZXIgZGVjaWRlcyB0byBub3QgZGUtZHVwbGljYXRlIGRlcGVuZGVuY2llcy5cbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMTc5NDMuXG4gICAqL1xuICBzdGF0aWMgaXNBbXBsaWZ5RXJyb3IgPSAoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBBbXBsaWZ5RXJyb3IgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmXG4gICAgICAnY2xhc3NpZmljYXRpb24nIGluIGVycm9yICYmXG4gICAgICAoZXJyb3IuY2xhc3NpZmljYXRpb24gPT09ICdFUlJPUicgfHwgZXJyb3IuY2xhc3NpZmljYXRpb24gPT09ICdGQVVMVCcpICYmXG4gICAgICB0eXBlb2YgZXJyb3IubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgICk7XG4gIH07XG5cbiAgc3RhdGljIGZyb21FcnJvciA9IChlcnJvcjogdW5rbm93bik6IEFtcGxpZnlFcnJvciA9PiB7XG4gICAgaWYgKEFtcGxpZnlFcnJvci5pc0FtcGxpZnlFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvclxuICAgICAgICA/IGAke2Vycm9yLm5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YFxuICAgICAgICA6ICdBbiB1bmtub3duIGVycm9yIGhhcHBlbmVkLiBDaGVjayBkb3duc3RyZWFtIGVycm9yJztcblxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGlzQ3JlZGVudGlhbHNFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0NyZWRlbnRpYWxzRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAnRW5zdXJlIHlvdXIgQVdTIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0bHkgc2V0IGFuZCByZWZyZXNoZWQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBpc1JlcXVlc3RTaWduYXR1cmVFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ1JlcXVlc3RTaWduYXR1cmVFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICdZb3UgY2FuIHJldHJ5IHlvdXIgbGFzdCByZXF1ZXN0LCBjaGVjayBpZiB5b3VyIHN5c3RlbSB0aW1lIGlzIHN5bmNocm9uaXplZCAoY2xvY2sgc2tldykgb3IgZW5zdXJlIHlvdXIgQVdTIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0bHkgc2V0IGFuZCByZWZyZXNoZWQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBpc1lhcmdzVmFsaWRhdGlvbkVycm9yKGVycm9yKSkge1xuICAgICAgcmV0dXJuIG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW52YWxpZENvbW1hbmRJbnB1dEVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICByZXNvbHV0aW9uOiAnUGxlYXNlIHNlZSB0aGUgdW5kZXJseWluZyBlcnJvciBtZXNzYWdlIGZvciByZXNvbHV0aW9uLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgaXNFTm90Rm91bmRFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0RvbWFpbk5vdEZvdW5kRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ1VuYWJsZSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHRvIGEgZG9tYWluJyxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ0Vuc3VyZSBkb21haW4gbmFtZSBpcyBjb3JyZWN0IGFuZCBuZXR3b3JrIGNvbm5lY3Rpb24gaXMgc3RhYmxlLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogY2F0Y2hlcyBTeW50YXhFcnJvcnMgdGhhdCB3ZXJlIHNvbWVob3cgbm90IGluc3RhbmNlcyBvZiBBbXBsaWZ5RXJyb3JcbiAgICAgKiB0aGlzIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgY2FuIHByb3Blcmx5IGlkZW50aWZ5IHdoZXJlIEFtcGxpZnlFcnJvciBpcyBiZWluZyBzdHJpcHBlZCBvZmZcbiAgICAgKi9cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBpc1N5bnRheEVycm9yKGVycm9yKSkge1xuICAgICAgcmV0dXJuIG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnU3ludGF4RXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ0NoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyIGZvciBzeW50YXggYW5kIHR5cGUgZXJyb3JzLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgaXNJbnN1ZmZpY2llbnREaXNrU3BhY2VFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0luc3VmZmljaWVudERpc2tTcGFjZUVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICdUaGVyZSBhcHBlYXJzIHRvIGJlIGluc3VmZmljaWVudCBzcGFjZSBvbiB5b3VyIHN5c3RlbSB0byBmaW5pc2guIENsZWFyIHVwIHNvbWUgZGlzayBzcGFjZSBhbmQgdHJ5IGFnYWluLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgaXNPdXRPZk1lbW9yeUVycm9yKGVycm9yKSkge1xuICAgICAgcmV0dXJuIG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW5zdWZmaWNpZW50TWVtb3J5U3BhY2VFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAnVGhlcmUgYXBwZWFycyB0byBiZSBpbnN1ZmZpY2llbnQgbWVtb3J5IG9uIHlvdXIgc3lzdGVtIHRvIGZpbmlzaC4gQ2xvc2Ugb3RoZXIgYXBwbGljYXRpb25zIG9yIHJlc3RhcnQgeW91ciBzeXN0ZW0gYW5kIHRyeSBhZ2Fpbi4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGlzSW5vdGlmeUVycm9yKGVycm9yKSkge1xuICAgICAgcmV0dXJuIG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW5zdWZmaWNpZW50SW5vdGlmeVdhdGNoZXJzRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ1RoZXJlIGFwcGVhcnMgdG8gYmUgYW4gaW5zdWZmaWNpZW50IG51bWJlciBvZiBpbm90aWZ5IHdhdGNoZXJzLiBUbyBpbmNyZWFzZSB0aGUgYW1vdW50IG9mIGlub3RpZnkgd2F0Y2hlcnMsIGNoYW5nZSB0aGUgYGZzLmlub3RpZnkubWF4X3VzZXJfd2F0Y2hlc2Agc2V0dGluZyBpbiB5b3VyIHN5c3RlbSBjb25maWcgZmlsZXMgdG8gYSBoaWdoZXIgdmFsdWUuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEFtcGxpZnlGYXVsdChcbiAgICAgICdVbmtub3duRmF1bHQnLFxuICAgICAge1xuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICB9LFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpLFxuICAgICk7XG4gIH07XG59XG5cbmNvbnN0IHRyeUZpbmRTZXJpYWxpemVkRXJyb3JKU09OU3RyaW5nID0gKFxuICBfc3RkZXJyOiBzdHJpbmcsXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICBsZXQgZXJyb3JKU09OU3RyaW5nID0gdHJ5RmluZFNlcmlhbGl6ZWRFcnJvckpTT05TdHJpbmdWMihfc3RkZXJyKTtcbiAgaWYgKCFlcnJvckpTT05TdHJpbmcpIHtcbiAgICBlcnJvckpTT05TdHJpbmcgPSB0cnlGaW5kU2VyaWFsaXplZEVycm9ySlNPTlN0cmluZ1YxKF9zdGRlcnIpO1xuICB9XG4gIHJldHVybiBlcnJvckpTT05TdHJpbmc7XG59O1xuXG4vKipcbiAqIFRyaWVzIHRvIGZpbmQgc2VyaWFsaXplZCBzdHJpbmcgYXNzdW1pbmcgdGhhdCBpdCBpcyBpbiBhIGZvcm0gb2Ygc2VyaWFsaXplZCBKU09OIGVuY29kZWQgd2l0aCBiYXNlNjQuXG4gKi9cbmNvbnN0IHRyeUZpbmRTZXJpYWxpemVkRXJyb3JKU09OU3RyaW5nVjIgPSAoXG4gIF9zdGRlcnI6IHN0cmluZyxcbik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIC8qKlxuICAgKiBgW1wiJ10/c2VyaWFsaXplZEVycm9yW1wiJ10/OlsgXT9gIGNhcHR1cmVzIHRoZSBzdGFydCBvZiB0aGUgc2VyaWFsaXplZCBlcnJvci4gVGhlIHF1b3RlcyBkZXBlbmQgb24gd2hpY2ggT1MgaXMgYmVpbmcgdXNlZFxuICAgKiBgKD86YChbYS16QS1aMC05Ky89XSs/KWB8JyhbYS16QS1aMC05Ky89XSs/KSd8XCIoW2EtekEtWjAtOSsvPV0rPylcIilgIGNhcHR1cmVzIHRoZSByZXN0IG9mIHRoZSBzZXJpYWxpemVkIHN0cmluZyBlbmNsb3NlZCBpbiBlaXRoZXIgc2luZ2xlIHF1b3RlLFxuICAgKiBkb3VibGUgcXVvdGVzIG9yIGJhY2stdGlja3MuXG4gICAqL1xuICBjb25zdCBleHRyYWN0aW9uUmVnZXggPVxuICAgIC9bXCInXT9zZXJpYWxpemVkRXJyb3JbXCInXT86WyBdPyg/OmAoW2EtekEtWjAtOSsvPV0rPylgfCcoW2EtekEtWjAtOSsvPV0rPyknfFwiKFthLXpBLVowLTkrLz1dKz8pXCIpLztcbiAgY29uc3Qgc2VyaWFsaXplZCA9IF9zdGRlcnIubWF0Y2goZXh0cmFjdGlvblJlZ2V4KTtcbiAgaWYgKHNlcmlhbGl6ZWQgJiYgc2VyaWFsaXplZC5sZW5ndGggPT09IDQpIHtcbiAgICAvLyA0IGJlY2F1c2UgMSBtYXRjaCBhbmQgMyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgY29uc3QgYmFzZTY0U2VyaWFsaXplZFN0cmluZyA9IHNlcmlhbGl6ZWRcbiAgICAgIC5zbGljZSgxKVxuICAgICAgLmZpbmQoKGl0ZW0pID0+IGl0ZW0gJiYgaXRlbS5sZW5ndGggPiAwKTtcbiAgICBpZiAoYmFzZTY0U2VyaWFsaXplZFN0cmluZykge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJhc2U2NFNlcmlhbGl6ZWRTdHJpbmcsICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogVHJpZXMgdG8gZmluZCBzZXJpYWxpemVkIHN0cmluZyBhc3N1bWluZyB0aGF0IGl0IGlzIGluIGEgZm9ybSBvZiBzZXJpYWxpemVkIEpTT04uXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGlzIG9sZCBmb3JtYXQgbGVmdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgaW4gY2FzZSB0aGF0IHN5bnRoLXRpbWUgY29tcG9uZW50cyBhcmUgdXNpbmcgb2xkZXIgdmVyc2lvbiBvZiBwbGF0Zm9ybS1jb3JlLlxuICovXG5jb25zdCB0cnlGaW5kU2VyaWFsaXplZEVycm9ySlNPTlN0cmluZ1YxID0gKFxuICBfc3RkZXJyOiBzdHJpbmcsXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICAvKipcbiAgICogYFtcIiddP3NlcmlhbGl6ZWRFcnJvcltcIiddPzpbIF0/YCBjYXB0dXJlcyB0aGUgc3RhcnQgb2YgdGhlIHNlcmlhbGl6ZWQgZXJyb3IuIFRoZSBxdW90ZXMgZGVwZW5kIG9uIHdoaWNoIE9TIGlzIGJlaW5nIHVzZWRcbiAgICogYCg/OmAoLis/KWB8JyguKz8pJ3xcIigoPzpcXFxcXCJ8W15cIl0pKj8pXCIpYCBjYXB0dXJlcyB0aGUgcmVzdCBvZiB0aGUgc2VyaWFsaXplZCBzdHJpbmcgZW5jbG9zZWQgaW4gZWl0aGVyIHNpbmdsZSBxdW90ZSxcbiAgICogZG91YmxlIHF1b3RlcyBvciBiYWNrLXRpY2tzLlxuICAgKi9cbiAgY29uc3QgZXh0cmFjdGlvblJlZ2V4ID1cbiAgICAvW1wiJ10/c2VyaWFsaXplZEVycm9yW1wiJ10/OlsgXT8oPzpgKC4rPylgfCcoLis/KSd8XCIoKD86XFxcXFwifFteXCJdKSo/KVwiKS87XG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSBfc3RkZXJyLm1hdGNoKGV4dHJhY3Rpb25SZWdleCk7XG4gIGlmIChzZXJpYWxpemVkICYmIHNlcmlhbGl6ZWQubGVuZ3RoID09PSA0KSB7XG4gICAgLy8gNCBiZWNhdXNlIDEgbWF0Y2ggYW5kIDMgY2FwdHVyaW5nIGdyb3Vwc1xuICAgIHJldHVybiBzZXJpYWxpemVkXG4gICAgICAuc2xpY2UoMSlcbiAgICAgIC5maW5kKChpdGVtKSA9PiBpdGVtICYmIGl0ZW0ubGVuZ3RoID4gMClcbiAgICAgID8ucmVwbGFjZUFsbCgnXFxcXFwiJywgJ1wiJylcbiAgICAgIC5yZXBsYWNlQWxsKFwiXFxcXCdcIiwgXCInXCIpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBpc0NyZWRlbnRpYWxzRXJyb3IgPSAoZXJyPzogRXJyb3IpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIChcbiAgICAhIWVyciAmJlxuICAgIFtcbiAgICAgICdFeHBpcmVkVG9rZW4nLFxuICAgICAgJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbicsXG4gICAgICAnQ3JlZGVudGlhbHNQcm92aWRlckVycm9yJyxcbiAgICAgICdJbnZhbGlkQ2xpZW50VG9rZW5JZCcsXG4gICAgICAnQ3JlZGVudGlhbHNFcnJvcicsXG4gICAgXS5pbmNsdWRlcyhlcnIubmFtZSlcbiAgKTtcbn07XG5cbmNvbnN0IGlzUmVxdWVzdFNpZ25hdHVyZUVycm9yID0gKGVycj86IEVycm9yKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAoXG4gICAgISFlcnIgJiZcbiAgICBbJ0ludmFsaWRTaWduYXR1cmVFeGNlcHRpb24nLCAnU2lnbmF0dXJlRG9lc05vdE1hdGNoJ10uaW5jbHVkZXMoZXJyLm5hbWUpXG4gICk7XG59O1xuXG4vLyBUaGVzZSB2YWxpZGF0aW9uIG1lc3NhZ2VzIGFyZSB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS95YXJncy95YXJncy9ibG9iLzBjOTVmOWM3OWUxODEwY2Y5Yzg5NjRmYmY3ZDEzOTAwOTQxMmY3ZTcvbGliL3ZhbGlkYXRpb24udHNcbmNvbnN0IGlzWWFyZ3NWYWxpZGF0aW9uRXJyb3IgPSAoZXJyPzogRXJyb3IpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIChcbiAgICAhIWVyciAmJlxuICAgIChbXG4gICAgICAnVW5rbm93biBjb21tYW5kJyxcbiAgICAgICdVbmtub3duIGFyZ3VtZW50JyxcbiAgICAgICdEaWQgeW91IG1lYW4nLFxuICAgICAgJ05vdCBlbm91Z2ggbm9uLW9wdGlvbiBhcmd1bWVudHMnLFxuICAgICAgJ1RvbyBtYW55IG5vbi1vcHRpb24gYXJndW1lbnRzJyxcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50JyxcbiAgICAgICdJbnZhbGlkIHZhbHVlczonLFxuICAgICAgJ01pc3NpbmcgZGVwZW5kZW50IGFyZ3VtZW50cycsXG4gICAgICAnSW1wbGljYXRpb25zIGZhaWxlZCcsXG4gICAgXS5zb21lKChtZXNzYWdlKSA9PiBlcnIubWVzc2FnZS5zdGFydHNXaXRoKG1lc3NhZ2UpKSB8fFxuICAgICAgZXJyLm1lc3NhZ2UuZW5kc1dpdGgoJ2FyZSBtdXR1YWxseSBleGNsdXNpdmUnKSlcbiAgKTtcbn07XG5cbmNvbnN0IGlzRU5vdEZvdW5kRXJyb3IgPSAoZXJyPzogRXJyb3IpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuICEhZXJyICYmIGVyci5tZXNzYWdlLmluY2x1ZGVzKCdnZXRhZGRyaW5mbyBFTk9URk9VTkQnKTtcbn07XG5cbmNvbnN0IGlzU3ludGF4RXJyb3IgPSAoZXJyPzogRXJyb3IpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuICEhZXJyICYmIGVyci5uYW1lID09PSAnU3ludGF4RXJyb3InO1xufTtcblxuY29uc3QgaXNJbnN1ZmZpY2llbnREaXNrU3BhY2VFcnJvciA9IChlcnI/OiBFcnJvcik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gKFxuICAgICEhZXJyICYmXG4gICAgWydFTk9TUEM6IG5vIHNwYWNlIGxlZnQgb24gZGV2aWNlJywgJ2NvZGUgRU5PU1BDJ10uc29tZSgobWVzc2FnZSkgPT5cbiAgICAgIGVyci5tZXNzYWdlLmluY2x1ZGVzKG1lc3NhZ2UpLFxuICAgIClcbiAgKTtcbn07XG5cbmNvbnN0IGlzT3V0T2ZNZW1vcnlFcnJvciA9IChlcnI/OiBFcnJvcik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gKFxuICAgICEhZXJyICYmXG4gICAgKGVyci5tZXNzYWdlLmluY2x1ZGVzKCdwcm9jZXNzIG91dCBvZiBtZW1vcnknKSB8fFxuICAgICAgZXJyLm1lc3NhZ2UuaW5jbHVkZXMoJ2Nvbm5lY3QgRU5PTUVNJykpXG4gICk7XG59O1xuXG5jb25zdCBpc0lub3RpZnlFcnJvciA9IChlcnI/OiBFcnJvcik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gISFlcnIgJiYgZXJyLm1lc3NhZ2UuaW5jbHVkZXMoJ2lub3RpZnlfYWRkX3dhdGNoJyk7XG59O1xuXG4vKipcbiAqIEFtcGxpZnkgZXhjZXB0aW9uIGNsYXNzaWZpY2F0aW9uc1xuICovXG5leHBvcnQgdHlwZSBBbXBsaWZ5RXJyb3JDbGFzc2lmaWNhdGlvbiA9ICdGQVVMVCcgfCAnRVJST1InO1xuXG4vKipcbiAqIEFtcGxpZnkgRXJyb3Igb3B0aW9ucyBvYmplY3RcbiAqL1xuZXhwb3J0IHR5cGUgQW1wbGlmeUVycm9yT3B0aW9ucyA9IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBkZXRhaWxzPzogc3RyaW5nO1xuICByZXNvbHV0aW9uPzogc3RyaW5nO1xuICBsaW5rPzogc3RyaW5nO1xuXG4gIC8vIENsb3VkRm9ybWF0aW9uIG9yIE5vZGVKUyBlcnJvciBjb2Rlc1xuICBjb2RlPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBTYW1lIGFzIEFtcGxpZnlFcnJvck9wdGlvbnMgZXhjZXB0IHJlc29sdXRpb24gaXMgcmVxdWlyZWRcbiAqL1xuZXhwb3J0IHR5cGUgQW1wbGlmeVVzZXJFcnJvck9wdGlvbnMgPSBPbWl0PFxuICBBbXBsaWZ5RXJyb3JPcHRpb25zLFxuICAncmVzb2x1dGlvbidcbj4gJiB7IHJlc29sdXRpb246IHN0cmluZyB9O1xuXG5jb25zdCBlcnJvclNlcmlhbGl6ZXIgPSAoXzogdW5rbm93biwgdmFsdWU6IHVua25vd24pID0+IHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gRXJyb3JTZXJpYWxpemVyRGVzZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcbmNsYXNzIEVycm9yU2VyaWFsaXplckRlc2VyaWFsaXplciB7XG4gIHN0YXRpYyBzZXJpYWxpemUgPSAoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgY29uc3Qgc2VyaWFsaXplZEVycm9yOiBTZXJpYWxpemVkRXJyb3JUeXBlID0ge1xuICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgfTtcbiAgICByZXR1cm4gc2VyaWFsaXplZEVycm9yO1xuICB9O1xuXG4gIHN0YXRpYyBkZXNlcmlhbGl6ZSA9IChkZXNlcmlhbGl6ZWQ6IFNlcmlhbGl6ZWRFcnJvclR5cGUpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihkZXNlcmlhbGl6ZWQubWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9IGRlc2VyaWFsaXplZC5uYW1lO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfTtcblxuICBzdGF0aWMgaXNTZXJpYWxpemVkRXJyb3JUeXBlID0gKG9iajogdW5rbm93bik6IG9iaiBpcyBTZXJpYWxpemVkRXJyb3JUeXBlID0+IHtcbiAgICBpZiAoXG4gICAgICBvYmogJiZcbiAgICAgIChvYmogYXMgU2VyaWFsaXplZEVycm9yVHlwZSkubmFtZSAmJlxuICAgICAgKG9iaiBhcyBTZXJpYWxpemVkRXJyb3JUeXBlKS5tZXNzYWdlXG4gICAgKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxudHlwZSBTZXJpYWxpemVkRXJyb3JUeXBlID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbn07XG4iXX0=