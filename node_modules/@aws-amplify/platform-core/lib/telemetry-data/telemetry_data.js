"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryPayloadSchema = void 0;
const zod_1 = __importDefault(require("zod"));
const identifiersSchema = zod_1.default.object({
    payloadVersion: zod_1.default.string(),
    sessionUuid: zod_1.default.string(),
    eventId: zod_1.default.string(),
    timestamp: zod_1.default.string(),
    localProjectId: zod_1.default.string(),
    accountId: zod_1.default.string().optional(),
    awsRegion: zod_1.default.string().optional(),
});
const eventSchema = zod_1.default.object({
    state: zod_1.default.enum(['ABORTED', 'FAILED', 'SUCCEEDED']),
    command: zod_1.default.object({
        path: zod_1.default.array(zod_1.default.string()),
        parameters: zod_1.default.array(zod_1.default.string()),
    }),
});
const environmentSchema = zod_1.default.object({
    os: zod_1.default.object({
        platform: zod_1.default.string(),
        release: zod_1.default.string(),
    }),
    shell: zod_1.default.string(),
    npmUserAgent: zod_1.default.string(),
    ci: zod_1.default.boolean(),
    memory: zod_1.default.object({
        total: zod_1.default.number(),
        free: zod_1.default.number(),
    }),
});
const projectSchema = zod_1.default.object({
    dependencies: zod_1.default
        .array(zod_1.default.object({
        name: zod_1.default.string(),
        version: zod_1.default.string(),
    }))
        .optional(),
});
const latencySchema = zod_1.default.object({
    total: zod_1.default.number(),
    init: zod_1.default.number().optional(),
    synthesis: zod_1.default.number().optional(),
    deployment: zod_1.default.number().optional(),
    hotSwap: zod_1.default.number().optional(),
});
const errorSchema = zod_1.default.lazy(() => zod_1.default.object({
    name: zod_1.default.string(),
    message: zod_1.default.string(),
    stack: zod_1.default.string(),
    cause: zod_1.default.optional(errorSchema), // Recursive reference
}));
exports.telemetryPayloadSchema = zod_1.default.object({
    identifiers: identifiersSchema,
    event: eventSchema,
    environment: environmentSchema,
    project: projectSchema,
    latency: latencySchema,
    error: zod_1.default.optional(errorSchema),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZW1ldHJ5X2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVsZW1ldHJ5LWRhdGEvdGVsZW1ldHJ5X2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOENBQW9CO0FBRXBCLE1BQU0saUJBQWlCLEdBQUcsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxjQUFjLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUMxQixXQUFXLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUN2QixPQUFPLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUNuQixTQUFTLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUNyQixjQUFjLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUMxQixTQUFTLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNoQyxTQUFTLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUNqQyxDQUFDLENBQUM7QUFFSCxNQUFNLFdBQVcsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQzNCLEtBQUssRUFBRSxhQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRCxPQUFPLEVBQUUsYUFBQyxDQUFDLE1BQU0sQ0FBQztRQUNoQixJQUFJLEVBQUUsYUFBQyxDQUFDLEtBQUssQ0FBQyxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDekIsVUFBVSxFQUFFLGFBQUMsQ0FBQyxLQUFLLENBQUMsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2hDLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxNQUFNLGlCQUFpQixHQUFHLGFBQUMsQ0FBQyxNQUFNLENBQUM7SUFDakMsRUFBRSxFQUFFLGFBQUMsQ0FBQyxNQUFNLENBQUM7UUFDWCxRQUFRLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtRQUNwQixPQUFPLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtLQUNwQixDQUFDO0lBQ0YsS0FBSyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDakIsWUFBWSxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDeEIsRUFBRSxFQUFFLGFBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDZixNQUFNLEVBQUUsYUFBQyxDQUFDLE1BQU0sQ0FBQztRQUNmLEtBQUssRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2pCLElBQUksRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0tBQ2pCLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxNQUFNLGFBQWEsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQzdCLFlBQVksRUFBRSxhQUFDO1NBQ1osS0FBSyxDQUNKLGFBQUMsQ0FBQyxNQUFNLENBQUM7UUFDUCxJQUFJLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtRQUNoQixPQUFPLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtLQUNwQixDQUFDLENBQ0g7U0FDQSxRQUFRLEVBQUU7Q0FDZCxDQUFDLENBQUM7QUFFSCxNQUFNLGFBQWEsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQzdCLEtBQUssRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2pCLElBQUksRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzNCLFNBQVMsRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFVBQVUsRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2pDLE9BQU8sRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQy9CLENBQUMsQ0FBQztBQVNILE1BQU0sV0FBVyxHQUE0QixhQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUN2RCxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQ1AsSUFBSSxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDaEIsT0FBTyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbkIsS0FBSyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDakIsS0FBSyxFQUFFLGFBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsc0JBQXNCO0NBQ3ZELENBQUMsQ0FDSCxDQUFDO0FBRVcsUUFBQSxzQkFBc0IsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQzdDLFdBQVcsRUFBRSxpQkFBaUI7SUFDOUIsS0FBSyxFQUFFLFdBQVc7SUFDbEIsV0FBVyxFQUFFLGlCQUFpQjtJQUM5QixPQUFPLEVBQUUsYUFBYTtJQUN0QixPQUFPLEVBQUUsYUFBYTtJQUN0QixLQUFLLEVBQUUsYUFBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7Q0FDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHogZnJvbSAnem9kJztcblxuY29uc3QgaWRlbnRpZmllcnNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHBheWxvYWRWZXJzaW9uOiB6LnN0cmluZygpLFxuICBzZXNzaW9uVXVpZDogei5zdHJpbmcoKSxcbiAgZXZlbnRJZDogei5zdHJpbmcoKSxcbiAgdGltZXN0YW1wOiB6LnN0cmluZygpLFxuICBsb2NhbFByb2plY3RJZDogei5zdHJpbmcoKSxcbiAgYWNjb3VudElkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGF3c1JlZ2lvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IGV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICBzdGF0ZTogei5lbnVtKFsnQUJPUlRFRCcsICdGQUlMRUQnLCAnU1VDQ0VFREVEJ10pLFxuICBjb21tYW5kOiB6Lm9iamVjdCh7XG4gICAgcGF0aDogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBwYXJhbWV0ZXJzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICB9KSxcbn0pO1xuXG5jb25zdCBlbnZpcm9ubWVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgb3M6IHoub2JqZWN0KHtcbiAgICBwbGF0Zm9ybTogei5zdHJpbmcoKSxcbiAgICByZWxlYXNlOiB6LnN0cmluZygpLFxuICB9KSxcbiAgc2hlbGw6IHouc3RyaW5nKCksXG4gIG5wbVVzZXJBZ2VudDogei5zdHJpbmcoKSxcbiAgY2k6IHouYm9vbGVhbigpLFxuICBtZW1vcnk6IHoub2JqZWN0KHtcbiAgICB0b3RhbDogei5udW1iZXIoKSxcbiAgICBmcmVlOiB6Lm51bWJlcigpLFxuICB9KSxcbn0pO1xuXG5jb25zdCBwcm9qZWN0U2NoZW1hID0gei5vYmplY3Qoe1xuICBkZXBlbmRlbmNpZXM6IHpcbiAgICAuYXJyYXkoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgICAgIHZlcnNpb246IHouc3RyaW5nKCksXG4gICAgICB9KSxcbiAgICApXG4gICAgLm9wdGlvbmFsKCksXG59KTtcblxuY29uc3QgbGF0ZW5jeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdG90YWw6IHoubnVtYmVyKCksXG4gIGluaXQ6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgc3ludGhlc2lzOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGRlcGxveW1lbnQ6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgaG90U3dhcDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCB0eXBlIEVycm9yRGV0YWlscyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHN0YWNrOiBzdHJpbmc7XG4gIGNhdXNlPzogRXJyb3JEZXRhaWxzO1xufTtcblxuY29uc3QgZXJyb3JTY2hlbWE6IHouWm9kVHlwZTxFcnJvckRldGFpbHM+ID0gei5sYXp5KCgpID0+XG4gIHoub2JqZWN0KHtcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgc3RhY2s6IHouc3RyaW5nKCksXG4gICAgY2F1c2U6IHoub3B0aW9uYWwoZXJyb3JTY2hlbWEpLCAvLyBSZWN1cnNpdmUgcmVmZXJlbmNlXG4gIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IHRlbGVtZXRyeVBheWxvYWRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkZW50aWZpZXJzOiBpZGVudGlmaWVyc1NjaGVtYSxcbiAgZXZlbnQ6IGV2ZW50U2NoZW1hLFxuICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRTY2hlbWEsXG4gIHByb2plY3Q6IHByb2plY3RTY2hlbWEsXG4gIGxhdGVuY3k6IGxhdGVuY3lTY2hlbWEsXG4gIGVycm9yOiB6Lm9wdGlvbmFsKGVycm9yU2NoZW1hKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBUZWxlbWV0cnlQYXlsb2FkID0gei5pbmZlcjx0eXBlb2YgdGVsZW1ldHJ5UGF5bG9hZFNjaGVtYT47XG4iXX0=