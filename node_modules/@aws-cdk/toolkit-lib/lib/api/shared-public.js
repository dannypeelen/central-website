"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/api/shared-public.ts
var shared_public_exports = {};
__export(shared_public_exports, {
  AssemblyError: () => AssemblyError,
  AuthenticationError: () => AuthenticationError,
  ExpandStackSelection: () => ExpandStackSelection,
  NonHotswappableReason: () => NonHotswappableReason,
  PermissionChangeType: () => PermissionChangeType,
  StackSelectionStrategy: () => StackSelectionStrategy,
  ToolkitError: () => ToolkitError
});
module.exports = __toCommonJS(shared_public_exports);

// ../tmp-toolkit-helpers/src/api/toolkit-error.ts
var TOOLKIT_ERROR_SYMBOL = Symbol.for("@aws-cdk/toolkit-lib.ToolkitError");
var AUTHENTICATION_ERROR_SYMBOL = Symbol.for("@aws-cdk/toolkit-lib.AuthenticationError");
var ASSEMBLY_ERROR_SYMBOL = Symbol.for("@aws-cdk/toolkit-lib.AssemblyError");
var CONTEXT_PROVIDER_ERROR_SYMBOL = Symbol.for("@aws-cdk/toolkit-lib.ContextProviderError");
var ToolkitError = class _ToolkitError extends Error {
  /**
   * Determines if a given error is an instance of ToolkitError.
   */
  static isToolkitError(x) {
    return x !== null && typeof x === "object" && TOOLKIT_ERROR_SYMBOL in x;
  }
  /**
   * Determines if a given error is an instance of AuthenticationError.
   */
  static isAuthenticationError(x) {
    return this.isToolkitError(x) && AUTHENTICATION_ERROR_SYMBOL in x;
  }
  /**
   * Determines if a given error is an instance of AssemblyError.
   */
  static isAssemblyError(x) {
    return this.isToolkitError(x) && ASSEMBLY_ERROR_SYMBOL in x;
  }
  /**
   * Determines if a given error is an instance of AssemblyError.
   */
  static isContextProviderError(x) {
    return this.isToolkitError(x) && CONTEXT_PROVIDER_ERROR_SYMBOL in x;
  }
  /**
   * An AssemblyError with an original error as cause
   */
  static withCause(message, error) {
    return new _ToolkitError(message, "toolkit", error);
  }
  /**
   * The type of the error, defaults to "toolkit".
   */
  type;
  /**
   * Denotes the source of the error as the toolkit.
   */
  source;
  /**
   * The specific original cause of the error, if available
   */
  cause;
  constructor(message, type = "toolkit", cause) {
    super(message);
    Object.setPrototypeOf(this, _ToolkitError.prototype);
    Object.defineProperty(this, TOOLKIT_ERROR_SYMBOL, { value: true });
    this.name = new.target.name;
    this.type = type;
    this.source = "toolkit";
    this.cause = cause;
  }
};
var AuthenticationError = class _AuthenticationError extends ToolkitError {
  /**
   * Denotes the source of the error as user.
   */
  source = "user";
  constructor(message) {
    super(message, "authentication");
    Object.setPrototypeOf(this, _AuthenticationError.prototype);
    Object.defineProperty(this, AUTHENTICATION_ERROR_SYMBOL, { value: true });
  }
};
var AssemblyError = class _AssemblyError extends ToolkitError {
  /**
   * An AssemblyError with an original error as cause
   */
  static withCause(message, error) {
    return new _AssemblyError(message, void 0, error);
  }
  /**
   * An AssemblyError with a list of stacks as cause
   */
  static withStacks(message, stacks) {
    return new _AssemblyError(message, stacks);
  }
  /**
   * Denotes the source of the error as user.
   */
  source = "user";
  /**
   * The stacks that caused the error, if available
   *
   * The `messages` property of each `cxapi.CloudFormationStackArtifact` will contain the respective errors.
   * Absence indicates synthesis didn't fully complete.
   */
  stacks;
  constructor(message, stacks, cause) {
    super(message, "assembly", cause);
    Object.setPrototypeOf(this, _AssemblyError.prototype);
    Object.defineProperty(this, ASSEMBLY_ERROR_SYMBOL, { value: true });
    this.stacks = stacks;
  }
};

// ../tmp-toolkit-helpers/src/api/cloud-assembly/stack-selector.ts
var StackSelectionStrategy = /* @__PURE__ */ ((StackSelectionStrategy2) => {
  StackSelectionStrategy2["ALL_STACKS"] = "all-stacks";
  StackSelectionStrategy2["MAIN_ASSEMBLY"] = "main-assembly";
  StackSelectionStrategy2["ONLY_SINGLE"] = "only-single";
  StackSelectionStrategy2["PATTERN_MATCH"] = "pattern-match";
  StackSelectionStrategy2["PATTERN_MUST_MATCH"] = "pattern-must-match";
  StackSelectionStrategy2["PATTERN_MUST_MATCH_SINGLE"] = "pattern-must-match-single";
  return StackSelectionStrategy2;
})(StackSelectionStrategy || {});
var ExpandStackSelection = /* @__PURE__ */ ((ExpandStackSelection2) => {
  ExpandStackSelection2["NONE"] = "none";
  ExpandStackSelection2["UPSTREAM"] = "upstream";
  ExpandStackSelection2["DOWNSTREAM"] = "downstream";
  return ExpandStackSelection2;
})(ExpandStackSelection || {});

// ../tmp-toolkit-helpers/src/payloads/diff.ts
var PermissionChangeType = /* @__PURE__ */ ((PermissionChangeType2) => {
  PermissionChangeType2["NONE"] = "none";
  PermissionChangeType2["BROADENING"] = "broadening";
  PermissionChangeType2["NON_BROADENING"] = "non-broadening";
  return PermissionChangeType2;
})(PermissionChangeType || {});

// ../tmp-toolkit-helpers/src/payloads/hotswap.ts
var NonHotswappableReason = /* @__PURE__ */ ((NonHotswappableReason2) => {
  NonHotswappableReason2["TAGS"] = "tags";
  NonHotswappableReason2["PROPERTIES"] = "properties";
  NonHotswappableReason2["OUTPUT"] = "output";
  NonHotswappableReason2["DEPENDENCY_UNSUPPORTED"] = "dependency-unsupported";
  NonHotswappableReason2["RESOURCE_UNSUPPORTED"] = "resource-unsupported";
  NonHotswappableReason2["RESOURCE_CREATION"] = "resource-creation";
  NonHotswappableReason2["RESOURCE_DELETION"] = "resource-deletion";
  NonHotswappableReason2["RESOURCE_TYPE_CHANGED"] = "resource-type-changed";
  NonHotswappableReason2["NESTED_STACK_CREATION"] = "nested-stack-creation";
  return NonHotswappableReason2;
})(NonHotswappableReason || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AssemblyError,
  AuthenticationError,
  ExpandStackSelection,
  NonHotswappableReason,
  PermissionChangeType,
  StackSelectionStrategy,
  ToolkitError
});
//# sourceMappingURL=shared-public.js.map
