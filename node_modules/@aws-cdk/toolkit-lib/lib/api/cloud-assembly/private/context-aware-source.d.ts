import type * as cxapi from '@aws-cdk/cx-api';
import type { ToolkitServices } from '../../../toolkit/private';
import { type Context } from '../../shared-private';
import type { ICloudAssemblySource } from '../types';
export interface ContextAwareCloudAssemblyProps {
    /**
     * AWS object (used by contextprovider)
     * @deprecated context should be moved to the toolkit itself
     */
    readonly services: ToolkitServices;
    /**
     * Application context
     */
    readonly context: Context;
    /**
     * The file used to store application context in (relative to cwd).
     *
     * @default "cdk.context.json"
     */
    readonly contextFile?: string;
    /**
     * Enable context lookups.
     *
     * Producing a `cxapi.CloudAssembly` will fail if this is disabled and context lookups need to be performed.
     *
     * @default true
     */
    readonly lookups?: boolean;
}
/**
 * Represent the Cloud Executable and the synthesis we can do on it
 */
export declare class ContextAwareCloudAssembly implements ICloudAssemblySource {
    private readonly source;
    private readonly props;
    private canLookup;
    private context;
    private contextFile;
    private ioHelper;
    constructor(source: ICloudAssemblySource, props: ContextAwareCloudAssemblyProps);
    /**
     * Produce a Cloud Assembly, i.e. a set of stacks
     */
    produce(): Promise<cxapi.CloudAssembly>;
}
