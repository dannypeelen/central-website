"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudAssemblySourceBuilder = void 0;
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const context_aware_source_1 = require("./context-aware-source");
const exec_1 = require("./exec");
const prepare_source_1 = require("./prepare-source");
const private_1 = require("../../io/private");
const shared_private_1 = require("../../shared-private");
const shared_public_1 = require("../../shared-public");
class CloudAssemblySourceBuilder {
    /**
     * Create a Cloud Assembly from a Cloud Assembly builder function.
     * @param builder the builder function
     * @param props additional configuration properties
     * @returns the CloudAssembly source
     */
    async fromAssemblyBuilder(builder, props = {}) {
        const services = await this.sourceBuilderServices();
        const context = new shared_private_1.Context({ bag: new shared_private_1.Settings(props.context ?? {}) });
        const contextAssemblyProps = {
            services,
            context,
            lookups: props.lookups,
        };
        return new context_aware_source_1.ContextAwareCloudAssembly({
            produce: async () => {
                const execution = new prepare_source_1.ExecutionEnvironment(services, { outdir: props.outdir });
                const env = await execution.defaultEnvVars();
                const assembly = await execution.changeDir(async () => execution.withContext(context.all, env, props.synthOptions ?? {}, async (envWithContext, ctx) => execution.withEnv(envWithContext, () => {
                    try {
                        return builder({
                            outdir: execution.outdir,
                            context: ctx,
                        });
                    }
                    catch (error) {
                        // re-throw toolkit errors unchanged
                        if (shared_public_1.ToolkitError.isToolkitError(error)) {
                            throw error;
                        }
                        // otherwise, wrap into an assembly error
                        throw shared_public_1.AssemblyError.withCause('Assembly builder failed', error);
                    }
                })), props.workingDirectory);
                if (cxapi.CloudAssembly.isCloudAssembly(assembly)) {
                    return assembly;
                }
                return (0, prepare_source_1.assemblyFromDirectory)(assembly.directory, services.ioHelper, props.loadAssemblyOptions);
            },
        }, contextAssemblyProps);
    }
    /**
     * Creates a Cloud Assembly from an existing assembly directory.
     * @param directory the directory of a already produced Cloud Assembly.
     * @returns the CloudAssembly source
     */
    async fromAssemblyDirectory(directory, props = {}) {
        const services = await this.sourceBuilderServices();
        const contextAssemblyProps = {
            services,
            context: new shared_private_1.Context(), // @todo there is probably a difference between contextaware and contextlookup sources
            lookups: false,
        };
        return new context_aware_source_1.ContextAwareCloudAssembly({
            produce: async () => {
                // @todo build
                await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_I0150.msg('--app points to a cloud assembly, so we bypass synth'));
                return (0, prepare_source_1.assemblyFromDirectory)(directory, services.ioHelper, props.loadAssemblyOptions);
            },
        }, contextAssemblyProps);
    }
    /**
     * Use a directory containing an AWS CDK app as source.
     * @param props additional configuration properties
     * @returns the CloudAssembly source
     */
    async fromCdkApp(app, props = {}) {
        const services = await this.sourceBuilderServices();
        // @todo this definitely needs to read files from the CWD
        const context = new shared_private_1.Context({ bag: new shared_private_1.Settings(props.context ?? {}) });
        const contextAssemblyProps = {
            services,
            context,
            lookups: props.lookups,
        };
        return new context_aware_source_1.ContextAwareCloudAssembly({
            produce: async () => {
                let lock = undefined;
                try {
                    // @todo build
                    // const build = this.props.configuration.settings.get(['build']);
                    // if (build) {
                    //   await execInChildProcess(build, { cwd: props.workingDirectory });
                    // }
                    const outdir = props.outdir ?? 'cdk.out';
                    try {
                        fs.mkdirpSync(outdir);
                    }
                    catch (e) {
                        throw new shared_public_1.ToolkitError(`Could not create output directory at '${outdir}' (${e.message}).`);
                    }
                    lock = await new shared_private_1.RWLock(outdir).acquireWrite();
                    const execution = new prepare_source_1.ExecutionEnvironment(services, { outdir });
                    const commandLine = await execution.guessExecutable(app);
                    const env = await execution.defaultEnvVars();
                    return await execution.withContext(context.all, env, props.synthOptions, async (envWithContext, _ctx) => {
                        await (0, exec_1.execInChildProcess)(commandLine.join(' '), {
                            eventPublisher: async (type, line) => {
                                switch (type) {
                                    case 'data_stdout':
                                        await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_I1001.msg(line));
                                        break;
                                    case 'data_stderr':
                                        await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_E1002.msg(line));
                                        break;
                                }
                            },
                            extraEnv: envWithContext,
                            cwd: props.workingDirectory,
                        });
                        return (0, prepare_source_1.assemblyFromDirectory)(outdir, services.ioHelper, props.loadAssemblyOptions);
                    });
                }
                finally {
                    await lock?.release();
                }
            },
        }, contextAssemblyProps);
    }
}
exports.CloudAssemblySourceBuilder = CloudAssemblySourceBuilder;
//# sourceMappingURL=data:application/json;base64,