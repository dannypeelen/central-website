{
  "version": 3,
  "sources": ["shared-public.ts", "../../../tmp-toolkit-helpers/src/api/toolkit-error.ts", "../../../tmp-toolkit-helpers/src/api/cloud-assembly/stack-selector.ts", "../../../tmp-toolkit-helpers/src/payloads/diff.ts", "../../../tmp-toolkit-helpers/src/payloads/hotswap.ts"],
  "sourcesContent": ["/* eslint-disable import/no-restricted-paths */\n\nexport {\n  ToolkitError,\n  AuthenticationError,\n  AssemblyError,\n} from '../../../tmp-toolkit-helpers/src/api/toolkit-error';\n\nexport {\n  ExpandStackSelection,\n  StackSelectionStrategy,\n  StackSelector,\n} from '../../../tmp-toolkit-helpers/src/api/cloud-assembly/stack-selector';\n\nexport type {\n  IoMessageLevel,\n  IoMessageCode,\n  IoMessage,\n  IoRequest,\n} from '../../../tmp-toolkit-helpers/src/api/io/io-message';\nexport type { IIoHost } from '../../../tmp-toolkit-helpers/src/api/io/io-host';\nexport type { ToolkitAction } from '../../../tmp-toolkit-helpers/src/api/io/toolkit-action';\n\nexport * from '../../../tmp-toolkit-helpers/src/payloads';\n", "import type * as cxapi from '@aws-cdk/cx-api';\n\nconst TOOLKIT_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.ToolkitError');\nconst AUTHENTICATION_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.AuthenticationError');\nconst ASSEMBLY_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.AssemblyError');\nconst CONTEXT_PROVIDER_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.ContextProviderError');\n\n/**\n * Represents a general toolkit error in the AWS CDK Toolkit.\n */\nexport class ToolkitError extends Error {\n  /**\n   * Determines if a given error is an instance of ToolkitError.\n   */\n  public static isToolkitError(x: any): x is ToolkitError {\n    return x !== null && typeof(x) === 'object' && TOOLKIT_ERROR_SYMBOL in x;\n  }\n\n  /**\n   * Determines if a given error is an instance of AuthenticationError.\n   */\n  public static isAuthenticationError(x: any): x is AuthenticationError {\n    return this.isToolkitError(x) && AUTHENTICATION_ERROR_SYMBOL in x;\n  }\n\n  /**\n   * Determines if a given error is an instance of AssemblyError.\n   */\n  public static isAssemblyError(x: any): x is AssemblyError {\n    return this.isToolkitError(x) && ASSEMBLY_ERROR_SYMBOL in x;\n  }\n\n  /**\n   * Determines if a given error is an instance of AssemblyError.\n   */\n  public static isContextProviderError(x: any): x is ContextProviderError {\n    return this.isToolkitError(x) && CONTEXT_PROVIDER_ERROR_SYMBOL in x;\n  }\n\n  /**\n   * An AssemblyError with an original error as cause\n   */\n  public static withCause(message: string, error: unknown): ToolkitError {\n    return new ToolkitError(message, 'toolkit', error);\n  }\n\n  /**\n   * The type of the error, defaults to \"toolkit\".\n   */\n  public readonly type: string;\n\n  /**\n   * Denotes the source of the error as the toolkit.\n   */\n  public readonly source: 'toolkit' | 'user';\n\n  /**\n   * The specific original cause of the error, if available\n   */\n  public readonly cause?: unknown;\n\n  constructor(message: string, type: string = 'toolkit', cause?: unknown) {\n    super(message);\n    Object.setPrototypeOf(this, ToolkitError.prototype);\n    Object.defineProperty(this, TOOLKIT_ERROR_SYMBOL, { value: true });\n    this.name = new.target.name;\n    this.type = type;\n    this.source = 'toolkit';\n    this.cause = cause;\n  }\n}\n\n/**\n * Represents an authentication-specific error in the AWS CDK Toolkit.\n */\nexport class AuthenticationError extends ToolkitError {\n  /**\n   * Denotes the source of the error as user.\n   */\n  public readonly source = 'user';\n\n  constructor(message: string) {\n    super(message, 'authentication');\n    Object.setPrototypeOf(this, AuthenticationError.prototype);\n    Object.defineProperty(this, AUTHENTICATION_ERROR_SYMBOL, { value: true });\n  }\n}\n\n/**\n * Represents an error causes by cloud assembly synthesis\n *\n * This includes errors thrown during app execution, as well as failing annotations.\n */\nexport class AssemblyError extends ToolkitError {\n  /**\n   * An AssemblyError with an original error as cause\n   */\n  public static withCause(message: string, error: unknown): AssemblyError {\n    return new AssemblyError(message, undefined, error);\n  }\n\n  /**\n   * An AssemblyError with a list of stacks as cause\n   */\n  public static withStacks(message: string, stacks?: cxapi.CloudFormationStackArtifact[]): AssemblyError {\n    return new AssemblyError(message, stacks);\n  }\n\n  /**\n   * Denotes the source of the error as user.\n   */\n  public readonly source = 'user';\n\n  /**\n   * The stacks that caused the error, if available\n   *\n   * The `messages` property of each `cxapi.CloudFormationStackArtifact` will contain the respective errors.\n   * Absence indicates synthesis didn't fully complete.\n   */\n  public readonly stacks?: cxapi.CloudFormationStackArtifact[];\n\n  private constructor(message: string, stacks?: cxapi.CloudFormationStackArtifact[], cause?: unknown) {\n    super(message, 'assembly', cause);\n    Object.setPrototypeOf(this, AssemblyError.prototype);\n    Object.defineProperty(this, ASSEMBLY_ERROR_SYMBOL, { value: true });\n    this.stacks = stacks;\n  }\n}\n\n/**\n * Represents an error originating from a Context Provider\n */\nexport class ContextProviderError extends ToolkitError {\n  /**\n   * Denotes the source of the error as user.\n   */\n  public readonly source = 'user';\n\n  constructor(message: string) {\n    super(message, 'context-provider');\n    Object.setPrototypeOf(this, ContextProviderError.prototype);\n    Object.defineProperty(this, CONTEXT_PROVIDER_ERROR_SYMBOL, { value: true });\n  }\n}\n", "/**\n * Which stacks should be selected from a cloud assembly\n */\nexport enum StackSelectionStrategy {\n  /**\n   * Returns all stacks in the app regardless of patterns,\n   * including stacks inside nested assemblies.\n   */\n  ALL_STACKS = 'all-stacks',\n\n  /**\n   * Returns all stacks in the main (top level) assembly only.\n   */\n  MAIN_ASSEMBLY = 'main-assembly',\n\n  /**\n   * If the assembly includes a single stack, returns it.\n   * Otherwise throws an exception.\n   */\n  ONLY_SINGLE = 'only-single',\n\n  /**\n   * Return stacks matched by patterns.\n   * If no stacks are found, execution is halted successfully.\n   * Most likely you don't want to use this but `StackSelectionStrategy.MUST_MATCH_PATTERN`\n   */\n  PATTERN_MATCH = 'pattern-match',\n\n  /**\n   * Return stacks matched by patterns.\n   * Throws an exception if the patterns don't match at least one stack in the assembly.\n   */\n  PATTERN_MUST_MATCH = 'pattern-must-match',\n\n  /**\n   * Returns if exactly one stack is matched by the pattern(s).\n   * Throws an exception if no stack, or more than exactly one stack are matched.\n   */\n  PATTERN_MUST_MATCH_SINGLE = 'pattern-must-match-single',\n}\n\n/**\n * When selecting stacks, what other stacks to include because of dependencies\n */\nexport enum ExpandStackSelection {\n  /**\n   * Don't select any extra stacks\n   */\n  NONE = 'none',\n\n  /**\n   * Include stacks that this stack depends on\n   */\n  UPSTREAM = 'upstream',\n\n  /**\n   * Include stacks that depend on this stack\n   */\n  DOWNSTREAM = 'downstream',\n\n  /**\n   * @TODO\n   * Include both directions.\n   * I.e. stacks that this stack depends on, and stacks that depend on this stack.\n   */\n  // FULL = 'full',\n}\n\n/**\n * A specification of which stacks should be selected\n */\nexport interface StackSelector {\n  /**\n   * The behavior if if no selectors are provided.\n   */\n  strategy: StackSelectionStrategy;\n\n  /**\n   * A list of patterns to match the stack hierarchical ids\n   * Only used with `PATTERN_*` selection strategies.\n   */\n  patterns?: string[];\n\n  /**\n   * Expand the selection to upstream/downstream stacks.\n   * @default ExpandStackSelection.None only select the specified/matched stacks\n   */\n  expand?: ExpandStackSelection;\n\n  /**\n   * By default, we throw an exception if the assembly contains no stacks.\n   * Set to `false`, to halt execution for empty assemblies without error.\n   *\n   * Note that actions can still throw if a stack selection result is empty,\n   * but the assembly contains stacks in principle.\n   *\n   * @default true\n   */\n  failOnEmpty?: boolean;\n}\n", "import type { Duration } from './types';\n\n/**\n * Different types of permission related changes in a diff\n */\nexport enum PermissionChangeType {\n  /**\n   * No permission changes\n   */\n  NONE = 'none',\n\n  /**\n   * Permissions are broadening\n   */\n  BROADENING = 'broadening',\n\n  /**\n   * Permissions are changed but not broadening\n   */\n  NON_BROADENING = 'non-broadening',\n}\n\n/**\n * Output of the diff command\n */\nexport interface DiffResult extends Duration {\n  /**\n   * Stack diff formatted as a string\n   */\n  readonly formattedStackDiff: string;\n\n  /**\n   * Security diff formatted as a string\n   */\n  readonly formattedSecurityDiff: string;\n}\n", "import type { PropertyDifference, Resource } from '@aws-cdk/cloudformation-diff';\nimport type * as cxapi from '@aws-cdk/cx-api';\nimport type { Duration } from './types';\nimport type { ResourceMetadata } from '../api/resource-metadata/resource-metadata';\n\n/**\n * A resource affected by a change\n */\nexport interface AffectedResource {\n  /**\n   * The logical ID of the affected resource in the template\n   */\n  readonly logicalId: string;\n  /**\n   * The CloudFormation type of the resource\n   * This could be a custom type.\n   */\n  readonly resourceType: string;\n  /**\n   * The friendly description of the affected resource\n   */\n  readonly description?: string;\n  /**\n   * The physical name of the resource when deployed.\n   *\n   * A physical name is not always available, e.g. new resources will not have one until after the deployment\n   */\n  readonly physicalName?: string;\n  /**\n   * Resource metadata attached to the logical id from the cloud assembly\n   *\n   * This is only present if the resource is present in the current Cloud Assembly,\n   * i.e. resource deletions will not have metadata.\n   */\n  readonly metadata?: ResourceMetadata;\n}\n\n/**\n * Represents a change in a resource\n */\nexport interface ResourceChange {\n  /**\n   * The logical ID of the resource which is being changed\n   */\n  readonly logicalId: string;\n  /**\n   * The value the resource is being updated from\n   */\n  readonly oldValue: Resource;\n  /**\n   * The value the resource is being updated to\n   */\n  readonly newValue: Resource;\n  /**\n   * The changes made to the resource properties\n   */\n  readonly propertyUpdates: Record<string, PropertyDifference<unknown>>;\n  /**\n   * Resource metadata attached to the logical id from the cloud assembly\n   *\n   * This is only present if the resource is present in the current Cloud Assembly,\n   * i.e. resource deletions will not have metadata.\n   */\n  readonly metadata?: ResourceMetadata;\n}\n\n/**\n * A change that can be hotswapped\n */\nexport interface HotswappableChange {\n  /**\n   * The resource change that is causing the hotswap.\n   */\n  readonly cause: ResourceChange;\n  /**\n   * A list of resources that are being hotswapped as part of the change\n   */\n  readonly resources: AffectedResource[];\n}\n\nexport enum NonHotswappableReason {\n  /**\n   * Tags are not hotswappable\n   */\n  TAGS = 'tags',\n  /**\n   * Changed resource properties are not hotswappable on this resource type\n   */\n  PROPERTIES = 'properties',\n  /**\n   * A stack output has changed\n   */\n  OUTPUT = 'output',\n  /**\n   * A dependant resource is not hotswappable\n   */\n  DEPENDENCY_UNSUPPORTED = 'dependency-unsupported',\n  /**\n   * The resource type is not hotswappable\n   */\n  RESOURCE_UNSUPPORTED = 'resource-unsupported',\n  /**\n   * The resource is created in the deployment\n   */\n  RESOURCE_CREATION = 'resource-creation',\n  /**\n   * The resource is removed in the deployment\n   */\n  RESOURCE_DELETION = 'resource-deletion',\n  /**\n   * The resource identified by the logical id has its type changed\n   */\n  RESOURCE_TYPE_CHANGED = 'resource-type-changed',\n  /**\n   * The nested stack is created in the deployment\n   */\n  NESTED_STACK_CREATION = 'nested-stack-creation',\n}\n\nexport interface RejectionSubject {\n  /**\n   * The type of the rejection subject, e.g. Resource or Output\n   */\n  readonly type: string;\n\n  /**\n   * The logical ID of the change that is not hotswappable\n   */\n  readonly logicalId: string;\n  /**\n   * Resource metadata attached to the logical id from the cloud assembly\n   *\n   * This is only present if the resource is present in the current Cloud Assembly,\n   * i.e. resource deletions will not have metadata.\n   */\n  readonly metadata?: ResourceMetadata;\n}\n\nexport interface ResourceSubject extends RejectionSubject {\n  /**\n   * A rejected resource\n   */\n  readonly type: 'Resource';\n  /**\n   * The type of the rejected resource\n   */\n  readonly resourceType: string;\n  /**\n   * The list of properties that are cause for the rejection\n   */\n  readonly rejectedProperties?: string[];\n}\n\nexport interface OutputSubject extends RejectionSubject {\n  /**\n   * A rejected output\n   */\n  readonly type: 'Output';\n}\n\n/**\n * A change that can not be hotswapped\n */\nexport interface NonHotswappableChange {\n  /**\n   * The subject of the change that was rejected\n   */\n  readonly subject: ResourceSubject | OutputSubject;\n  /**\n   * Why was this change was deemed non-hotswappable\n   */\n  readonly reason: NonHotswappableReason;\n  /**\n   * Tells the user exactly why this change was deemed non-hotswappable and what its logical ID is.\n   * If not specified, `displayReason` default to state that the properties listed in `rejectedChanges` are not hotswappable.\n   */\n  readonly description: string;\n}\n\nexport interface HotswapDeploymentAttempt {\n  /**\n   * The stack that's currently being deployed\n   */\n  readonly stack: cxapi.CloudFormationStackArtifact;\n\n  /**\n   * The mode the hotswap deployment was initiated with.\n   */\n  readonly mode: 'hotswap-only' | 'fall-back';\n}\n\n/**\n * Information about a hotswap deployment\n */\nexport interface HotswapDeploymentDetails {\n  /**\n   * The stack that's currently being deployed\n   */\n  readonly stack: cxapi.CloudFormationStackArtifact;\n\n  /**\n   * The mode the hotswap deployment was initiated with.\n   */\n  readonly mode: 'hotswap-only' | 'fall-back';\n  /**\n   * The changes that were deemed hotswappable\n   */\n  readonly hotswappableChanges: HotswappableChange[];\n  /**\n   * The changes that were deemed not hotswappable\n   */\n  readonly nonHotswappableChanges: NonHotswappableChange[];\n}\n\n/**\n * The result of an attempted hotswap deployment\n */\nexport interface HotswapResult extends Duration, HotswapDeploymentDetails {\n  /**\n   * Whether hotswapping happened or not.\n   *\n   * `false` indicates that the deployment could not be hotswapped and full deployment may be attempted as fallback.\n   */\n  readonly hotswapped: boolean;\n}\n"],
  "mappings": "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",
  "names": ["StackSelectionStrategy", "ExpandStackSelection", "PermissionChangeType", "NonHotswappableReason"]
}
